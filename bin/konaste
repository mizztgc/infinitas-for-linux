#!/usr/bin/env bash

VERSION='0.1b'
#
# Konaste Linux: A Bash script for installing and playing KONAMI Amusement Game
# Station (Konaste) games on Linux-based operating systems, using Wine.
# https://github.com/mizztgc/konaste-linux
#
# DISCLAIMER: This script is in NO WAY affiliated with, endorsed, nor supported
# by KONAMI Amusement themselves. In order to play your preferred Konaste
# games, you will need an active KONAMI ID, plus the necessary subscriptions to
# each game's basic course in order to access them outside of trial mode.
#
# WARNING: Due to Wine's nature, some titles may exhibit SEVERE ISSUES not
# present on Windows. This script does not address any of these issues other
# than providing a sample rate fix for the BEMANI (rhythm game) titles. Not all
# Konaste titles have been tested, and may exhibit some undocumented bugs.
#

#
# HOW IT WORKS:
# 1. User selects game launcher from DE/WM
# 2. Konaste Linux initializes a Wineprefix, if necessary
# 3. Search the prefix's registry for the game's InstallDir key
# 4. Download and run the game installer, if not installed
# 5. Open the game's launch page in a browser, if no URI is provided
# 6. Start the game's launcher, with the URI as an argument
# 7. GO BONGA~!
#

WINE="$(command -v wine)"
WINEBOOT="$(command -v wineboot)"
WINEPATH="$(command -v winepath)"
WINESERVER="$(command -v wineserver)"
WINETRICKS="$(command -v winetricks)"
MSIEXTRACT="$(command -v msiextract)"
PW_LOOPBACK="$(command -v pw-loopback)"
PACTL="$(command -v pactl)"
WGET="$(command -v wget)"
GAMEMODE="$(command -v gamemoderun)"
GAMESCOPE="$(command -v gamescope)"

DEFAULT_PREFIX_LOCATION="$HOME/.local/share/konaste"

error() {
	printf '\033[1;38;5;9m-> ERROR:\033[0m %s\033[0m\n' "$@" >&2
}

warning() {
	printf '\033[1;38;5;11m-> WARNING:\033[0m %s\033[0m\n' "$@" >&2
}

info() {
	printf '\033[1m-> %s\033[0m\n' "$@" >&2
}

ok() {
	printf '\033[1;38;5;10m-> %s\033[0m\n' "$@" >&2
}

show_help() {
	exc=0
	echo -en "\033[1mKonaste Linux v${VERSION} Help"
	if [[ -n "$1" ]]; then
		case "$1" in
			[Ii][Dd]|[Gg][Aa][Mm][Ee][Ii][Dd])
				echo -e ": Game IDs\033[0m\n"
				echo -e "Each Konaste game has a game ID associated with it to help identify it with\nthis script. They are listed below:"
				echo -e "  iidx       \033[1mbeatmania IIDX \033[38;5;81mINFINITAS\033[0m"
				echo -e "  sdvx       \033[1mSOUND VOLTEX \033[38;5;123mEXCEED\033[0m \033[38;5;199mGEAR\033[0m \033[1;38;5;196mコナステ\033[0m"
				echo -e "  ddr        \033[1mDanceDanceRevolution \033[38;5;212mGRAND PRIX\033[0m"
				echo -e "  gitadora   \033[1;38;5;214mGI\033[38;5;226mTA\033[38;5;118mDO\033[38;5;39mRA\033[0m \033[1;38;5;196mコナステ\033[0m"
				echo -e "  nostalgia  \033[1;38;5;141mノスタルジア ($(get_game_information entitle nostalgia))\033[0m"
				echo -e "  popn       \033[1;38;5;226mpop'n music\033[0m \033[1;38;5;27mL\033[38;5;208mi\033[38;5;82mv\033[38;5;214me\033[38;5;177ml\033[38;5;198my\033[0m"
				echo -e "  bombergirl \033[1;38;5;220mボンバーガール ($(get_game_information entitle bombergirl))\033[0m"

				echo -e "\nTo install/play one of these titles, run the script with the game ID specified\nas an argument. For example, to install/play beatmania IIDX INFINITAS:\n  \033[1m\$ $(basename -- $0) iidx\033[0m"
				;;
			*)
				echo -en '\r\033[2K' # Erase title line
				error "Unknown help section: $1"
				show_help # Run the command, but without any args
				return 1
				;;
		esac
	else
		echo -e "\033[0m\nUsage: $(basename -- $0) <game ID|command> ..."
		echo -e "\n\033[1mCommands: \033[0m"
		echo -e "  init: Initialize the Wineprefix"
		echo -e "  list: List installed games"
		echo -e "  help: Show this message"
		echo -e "\n\033[1mFlags: \033[0m"
		echo -e "  --silent:    Skip the game installer and use defaults (requires msitools)"
		echo -en "  --gamescope: Use Valve's gamescope compositor "
		if [[ ! -x "${GAMESCOPE}" ]]; then
			echo -e '\033[38;5;1m(not installed)\033[0m'
		else
			echo -e '\033[38;5;2m(installed)\033[0m'
		fi
		echo -e "\nFor a list of usable game IDs, run the following:"
		echo -e "  \033[1m\$ $(basename -- $0) help \033[4mgameid\033[0m"
	fi
	return
}

####################################################################################################
####################################################################################################
####################################################################################################

parse_flags() {
	# TODO: Improve this.
	if [[ $# -gt 0 ]]; then
		while [[ $# -gt 0 ]]; do
			case "$1" in
				help) show_help "$2"; exit $? ;;
				version) echo "Konaste Linux v${VERSION}" && exit ;;
				list) declare -gr cmd='list' 2>/dev/null ;;
				init) declare -gr cmd='init' 2>/dev/null ;;
				iidx|sdvx|ddr|gitadora|nostalgia|popn|bombergirl) [[ -z "$toPlay" ]] && toPlay="$1" ;;
				# Now we get to the good part
				bm2dxinf://*|konaste.*://*|*://*)
					if [[ -n "$toPlay" ]]; then
						if [[ -n "$(grep -Eo $(get_game_information uri) <(echo $1))" ]]; then
							launchUri="$1"
						else
							error "$(get_title) cannot be launched with a $(echo $1 | sed 's/:\/\/.*//') URI"
							exit 2
						fi
					else
						# Fine. We'll just GUESS the game that needs to be played.
						case "$1" in
							bm2dxinf://*) [[ -z "$toPlay" ]] && toPlay='iidx' ;;
							konaste.sdvx://*) [[ -z "$toPlay" ]] && toPlay='sdvx' ;;
							konaste.ddr://*) [[ -z "$toPlay" ]] && toPlay='ddr' ;;
							konaste.gitadora://*) [[ -z "$toPlay" ]] && toPlay='gitadora' ;;
							konaste.nostalgia://*) [[ -z "$toPlay" ]] && toPlay='nostalgia' ;;
							konaste.popn-music://*) [[ -z "$toPlay" ]] && toPlay='popn' ;;
							konaste.bomber-girl://*) [[ -z "$toPlay" ]] && toPlay='bombergirl' ;;
							konaste.*://*)
								error "Invalid Konaste URI specified: $1"
								exit 2
								;;
							*)
								error "Unknown URI specified: $1"
								exit 2
								;;
						esac

						launchUri="$1"
					fi
					;;
				# Flags and whatnot
				--silent) silentInstall=1 ;;
				--gamescope) declare -gr useGamescope=1 2>/dev/null ;;
				--*) error "Unknown flag: $1" && exit 1 ;;
				*) error "Unknown command: $1" && exit 1 ;;
			esac

			shift
		done
	else
		error "You must specify an argument"
		exit 1
	fi
}

####################################################################################################
####################################################################################################
####################################################################################################

function get_launcher_for_game() {
	[[ -z "$toPlay" ]] && return 1
	# FIXME: Find a better way to get values from the Windows registry
	# Even though this does "work", it's by no means perfect, and I've already fried my ADHD brain
	# trying to learn how regular expressions work.
	local k="$(WINEDEBUG='-all' "${WINE}" reg query "HKLM\\SOFTWARE\\KONAMI\\$(get_game_information dirtitle)" /v 'InstallDir' '/reg:64' | awk '/REG_/ {print substr($0, index($0,$3))}')"
	if [[ -n "$k" ]]; then
		path="$("${WINEPATH}" -u "${k}")"
		cd "${path:0:-1}" 2>/dev/null
		[[ -f launcher/modules/"$(get_game_information launcher)".exe ]] && {
			echo "$(${WINEPATH} -w launcher/modules/$(get_game_information launcher).exe)"
			return 0
		}
	fi

	return 1
}

function get_title() {
	# This function is to get a proper localized title for the game
	[[ -z "$toPlay" ]] && return 1
	if [[ "${LANG}" != ja* ]]; then
		if [[ -n "$(get_game_information entitle)" ]]; then
			echo "$(get_game_information entitle)"
		else
			echo "$(get_game_information title)"
		fi
	else
		echo "$(get_game_information title)"
	fi
}

function get_game_information() {
	if [[ -z "$2" ]]; then
		if [[ -n "$toPlay" ]]; then
			obtain="$toPlay"
		else
			return 1
		fi
	else
		obtain="$2"
	fi

	case "$obtain" in
		iidx)
			GAME_TITLE='beatmania IIDX INFINITAS'
			DIR_TITLE="${GAME_TITLE}"
			SIMPLE_NAME="infinitas"
			INSTALLER_LINK="https://d1rc4pwxnc0pe0.cloudfront.net/v2/installer/infinitas_installer_2022060800.msi"
			LAUNCH_PAGE="https://p.eagate.573.jp/game/infinitas/2/api/login/login.html"
			LAUNCHER_NAME='bm2dx_launcher'
			URI='bm2dxinf'
			;;
		sdvx)
			GAME_TITLE='SOUND VOLTEX EXCEED GEAR コナステ'
			EN_TITLE='SOUND VOLTEX EXCEED GEAR'
			DIR_TITLE='SOUND VOLTEX EXCEED GEAR'
			SIMPLE_NAME="sdvx-exceedgear"
			INSTALLER_LINK="https://dks1q2aivwkd6.cloudfront.net/vi/installer/sdvx_installer_2022011800.msi"
			LAUNCH_PAGE="https://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=sdvx"
			LAUNCHER_NAME='launcher'
			URI='konaste.sdvx'
			;;
		ddr)
			GAME_TITLE='DanceDanceRevolution GRAND PRIX'
			DIR_TITLE='DanceDanceRevolution'
			SIMPLE_NAME="ddr-gp"
			INSTALLER_LINK="https://d2el0dli9l0x2p.cloudfront.net/installer/ddr_installer_2022012601.msi"
			LAUNCH_PAGE="http://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=ddr"
			LAUNCHER_NAME='launcher'
			URI='konaste.ddr'
			;;
		gitadora)
			GAME_TITLE='GITADORA コナステ'
			EN_TITLE='GITADORA'
			DIR_TITLE='GITADORA'
			SIMPLE_NAME="gitadora"
			INSTALLER_LINK="https://d1omkh45tn6edw.cloudfront.net/inst/GITADORA_installer.msi"
			LAUNCH_PAGE="http://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=gitadora"
			LAUNCHER_NAME='launcher'
			URI='konaste.gitadora'
			;;
		nostalgia)
			GAME_TITLE='ノスタルジア'
			EN_TITLE='NOSTALGIA'
			DIR_TITLE='NOSTALGIA'
			SIMPLE_NAME="nostalgia"
			INSTALLER_LINK="https://d26kzmeiv4899f.cloudfront.net/installer/NOSTALGIA_installer.msi"
			LAUNCH_PAGE="http://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=NOSTALGIA"
			LAUNCHER_NAME='launcher'
			URI='konaste.nostalgia'
			;;
		popn)
			GAME_TITLE="pop'n music Lively"
			DIR_TITLE="${GAME_TITLE}"
			SIMPLE_NAME="popn"
			INSTALLER_LINK="https://d1twxdn5j8sbm3.cloudfront.net/installer/popn_installer_2021021801.msi"
			LAUNCH_PAGE="https://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=popn-music"
			LAUNCHER_NAME='launcher'
			URI='konaste.popn-music'
			;;
		bombergirl)
			GAME_TITLE='ボンバーガール'
			EN_TITLE='BOMBERGIRL'
			DIR_TITLE='BomberGirl'
			SIMPLE_NAME="bombergirl"
			INSTALLER_LINK="https://d1q1iflay6y5jj.cloudfront.net/Installer/2021122200_b37bc853/BomberGirl_Installer.msi"
			LAUNCH_PAGE="https://p.eagate.573.jp/game/konasteapp/API/login/login.html?game_id=bomber-girl"
			LAUNCHER_NAME='launcher'
			URI='konaste.bomber-girl'
			;;
		*)
			#error "Invalid game specified: $1" >&2
			return 1
			;;
	esac

	# Determine what we need
	case "$1" in
		title)		echo -n "${GAME_TITLE}" ;;
		entitle)	echo -n "${EN_TITLE}" ;;
		dirtitle)	echo -n "${DIR_TITLE}" ;;
		simple) 	echo -n "${SIMPLE_NAME}" ;;
		installer)	echo -n "${INSTALLER_LINK}" ;;
		webpage)	echo -n "${LAUNCH_PAGE}" ;;
		launcher)	echo -n "${LAUNCHER_NAME}" ;;
		uri)		echo -n "${URI}" ;;
		*) ;;
	esac

	unset GAME_TITLE EN_TITLE DIR_TITLE SIMPLE_NAME INSTALLER_LINK LAUNCH_PAGE LAUNCHER_NAME obtain
	return 0
}

####################################################################################################
####################################################################################################
####################################################################################################

list_games() {
	get() {
		toPlay="$1"
		[[ -n "$(get_launcher_for_game)" ]] && echo "$toPlay"
	}

	get 'iidx'
	get 'sdvx'
	get 'ddr'
	get 'gitadora'
	get 'popn'
	get 'nostalgia'
	get 'bombergirl'
	exit 0
}

prepare_wineprefix() {
	# Create the Wineprefix if it does not exist
	if [[ ! -e "${WINEPREFIX}" && ! -f "${WINEPREFIX}/system.reg" ]]; then
		info "Wineprefix at ${WINEPREFIX} was not found. Creating one now..." >&2
		mkdir -p "${WINEPREFIX}"
		"${WINEBOOT}" -i 2>/dev/null
	else
		warning "Existing Wineprefix detected. Starting initialization process..."
		"${WINEBOOT}" -u 2>/dev/null
	fi

	DXVK_LINK="https://github.com/doitsujin/dxvk/releases/download/v2.5.3/dxvk-2.5.3.tar.gz"
	VCR2010_LINK="https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x64.exe"

	# Add the fonts so Japanese/Chinese characters render properly
	# Distros are pretty weird with how they package fonts, especially the Noto CJK ones
	if [[ -d "$(find /usr/share/fonts -type d -name 'noto-cjk')" ]]; then
	#if [[ -d '/usr/share/fonts/noto-cjk' || -d '/usr/share/fonts/truetype/noto-cjk' ]]; then
		# If the Noto CJK font family is present on the system, use it
		info 'Found Noto Sans CJK font family in system' >&2
		info 'Setting registry entries to use for CJK fonts...' >&2
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MS Gothic' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MS PGothic' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MS UI Gothic' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MS Mincho' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MS PMincho' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Meiryo' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Meiryo UI' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'メイリオ' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'ＭＳ ゴシック' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'ＭＳ Ｐゴシック' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Microsoft JhengHei' /t 'REG_SZ' /d 'Noto Sans CJK TC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Microsoft JhengHei UI' /t 'REG_SZ' /d 'Noto Sans CJK TC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Microsoft YaHei' /t 'REG_SZ' /d 'Noto Sans CJK SC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Microsoft YaHei UI' /t 'REG_SZ' /d 'Noto Sans CJK SC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MingLiU' /t 'REG_SZ' /d 'Noto Sans CJK TC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'MingLiU-ExtB' /t 'REG_SZ' /d 'Noto Sans CJK TC' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'ＭＳ 明朝' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'ＭＳ Ｐゴシック' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'ＭＳ Ｐ明朝' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Yu Gothic' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Yu Gothic UI' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Fonts\Replacements' /v 'Yu Mincho' /t 'REG_SZ' /d 'Noto Sans CJK JP' /f > /dev/null
	else
		warning "Noto CJK fonts were not found on your system. Japanese fonts may not render properly!"
	fi

	cd "${WINEPREFIX}/drive_c"

	# might be redundant since wine already bundles a version of vcr2010
	info 'Downloading Microsoft Visual C++ Redist 2010...' >&2
	"${WGET}" -qt 3 -O "${WINEPREFIX}/drive_c/$(basename -- $VCR2010_LINK)" "$VCR2010_LINK"
	if [[ $? -ne 0 ]]; then
		error "Failed to install Microsoft Visual C++ Redist 2010!"
		exit 3
	else
		info 'Installing Microsoft Visual C++ Redist 2010...' >&2
		"${WINE}" 'C:\vcredist_x64.exe' '/quiet' 2>/dev/null
		if [[ $? -ne 0 ]]; then
			error "Failed to install Microsoft Visual C++ Redist 2010!"
			exit 4
		fi

		rm "$(basename -- $VCR2010_LINK)"
	fi

	# TODO: Allow the user to choose whether they want DXVK or not
	"${WGET}" -qt 3 -O "${WINEPREFIX}/drive_c/$(basename -- $DXVK_LINK)" "$DXVK_LINK"
	if [[ $? -ne 0 ]]; then
		error "Failed to install DXVK. The setup process will continue without it..."
	else
		info "Extracting DXVK archive..." >&2
		tar -xf dxvk-*.tar.gz

		# the '-b' flag makes a backup of the built-in DLLs in case you need to revert
		info "Moving DXVK files to Windows directory..." >&2
		mv -b dxvk-*/x32/*.dll windows/syswow64/
		mv -b dxvk-*/x64/*.dll windows/system32/

		# DX8 and DX10 might not be needed, since the BEMANI games run with DX9 and bonga uses DX11 (unity moment)
		info "Setting DLL overrides for DXVK..." >&2
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d8' /t 'REG_SZ' /d 'native' /f '/reg:64' > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d8' /t 'REG_SZ' /d 'native' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d9' /t 'REG_SZ' /d 'native' /f '/reg:64' > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d9' /t 'REG_SZ' /d 'native' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d10core' /t 'REG_SZ' /d 'native' /f '/reg:64' > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d10core' /t 'REG_SZ' /d 'native' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d11' /t 'REG_SZ' /d 'native' /f '/reg:64' > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'd3d11' /t 'REG_SZ' /d 'native' /f > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'dxgi' /t 'REG_SZ' /d 'native' /f '/reg:64' > /dev/null
		"${WINE}" reg add 'HKCU\SOFTWARE\Wine\DllOverrides' /v 'dxgi' /t 'REG_SZ' /d 'native' /f > /dev/null

		# Clean up remaining files
		rm -rf dxvk-*
	fi

	info "Creating additional registry keys..." >&2
	"${WINE}" reg add 'HKCU\SOFTWARE\Wine\X11 Driver' /v 'UseXRandR' /t 'REG_SZ' /d 'Y' /f '/reg:64' > /dev/null				# Use xrandr on X11 to change resolution + refresh if needed
	"${WINE}" reg add 'HKLM\SOFTWARE\Microsoft\DirectDraw' /v 'ForceRefreshRate' /t 'REG_DWORD' /d 120 /f '/reg:64' > /dev/null	# Force 120Hz in virtual desktop
	"${WINE}" reg add 'HKCU\SOFTWARE\Wine\FileOpenAssociations' /v 'Enable' /d 'N' /f > /dev/null								# Stop Wine from creating desktop & mime entries
	"${WINE}" reg add 'HKCU\SOFTWARE\Wine\Explorer\Desktops' /v 'Konaste' /d '1920x1080' /f > /dev/null							# Virtual desktop

	# Officially introduced in Wine 10.0 to use ffmpeg over gstreamer for Media Foundation libraries.
	# Currently disabled due to an audio bug in beatmania IIDX INFINITAS involving songs that utilize the new
	# audio container (some CANNON BALLERS & Rootage songs, and all HEROIC VERSE, BISTROVER, CastHour, and RESIDENT songs).
	# Uncomment if you want it, but be prepared to hear some lovely static in aforementioned songs.
	#"${WINE}" reg add 'HKCU\SOFTWARE\Wine\MediaFoundation' /v 'DisableGstByteStreamHandler' /t 'REG_DWORD' /d 1 /f '/reg:64' > /dev/null

	case "${LANG}" in
		ja*) PREFIX_INIT="Wineprefixは初期化され、コナステで使用できるようになりました" ;;
		*)   PREFIX_INIT="Wineprefix has been initialized and is ready to use for Konaste" ;;
	esac
	ok "${PREFIX_INIT}" >&2
}

launch_game() {
	[[ -z "$toPlay" ]] && exit 1
	info "Launching $(get_title)..."

	# Cut down on DXVK messages in your terminal
	export DXVK_LOG_LEVEL='error'

	# Add some launch parameters for the game
	# TODO: Create and execute a temporary script to make it easier to use with gamescope
	declare -a launchParams=( )
	if [[ -x "${GAMEMODE}" ]]; then
		info "Using gamemoderun"
		launchParams+=( "${GAMEMODE}" )
	else
		warning "Unable to locate binary for gamemoderun. While not required, it is recommended to have to maximize performance"
	fi

	if [[ "$useGamescope" -eq 1 ]]; then
		if [[ -x "${GAMESCOPE}" ]]; then
			info "Using gamescope"
			# I chose 1280x720 for better compatibility for the SteamOS noobs, but I do
			# believe 1920x1080 would be better all round.
			launchParams+=( "${GAMESCOPE}" -W 1280 -H 720 -w 1920 -h 1080 )
			case "$toPlay" in
				iidx|sdvx|ddr) launchParams+=( -r 120 --framerate-limit 120 ) ;; # these games support 120fps
				bombergirl)    launchParams+=( -r 60 --adaptive-sync ) ;; # since bonga is a unity game
				*)             launchParams+=( -r 60 --framerate-limit 60 ) ;;

			esac
			launchParams+=( -f -- )
		else
			warning "--gamescope flag provided, but gamescope was not found on your system. Running normally..."
		fi
	fi

	# The BEMANI games require a loopback device for audio to work.
	# Bomber Girl uses a proper game engine (Unity) and doesn't need such workarounds.
	# Thanks for making things difficult, konmai!
	if [[ "$toPlay" != 'bombergirl' ]]; then
		[[ -z "${PW_LOOPBACK}" ]] && error "Missing PipeWire executable: pw-loopback" && exit 1
		[[ -z "${PACTL}" ]] && error "Missing dependency: libpulse" && exit 1

		# I may have had help from ChatGPT for this part (damn regular expressions...)
		current_samplerate=$($PACTL info | grep -w 'Default Sample Specification:' | sed 's/.* \([0-9]*\)Hz/\1/')
		if [[ "$current_samplerate" -ne 44100 ]]; then
			warning "Audio sample rate detected at ${current_samplerate}Hz. Enabling loopback device..."
			"${PW_LOOPBACK}" -m '[ FL FR ]' --capture-props='media.class=Audio/Sink node.name=konaste node.description=Konaste audio.rate=44100' &
			[[ $? -eq 0 ]] && echo "Successfully enabled PipeWire loopback device" >&2 && export PULSE_SINK=konaste
		else
			echo "Audio sample rate detected at 44100Hz. Not creating loopback device..." >&2
		fi
		unset current_samplerate
	fi

	# Force virtual desktop to help with gamescope
	launchParams+=( "${WINE}" start '/high' '/wait' )
	if [[ "$useGamescope" -eq 1 && -x "${GAMESCOPE}" ]]; then
		launchParams+=( explorer '/desktop=Konaste,1920x1080' )
	fi

	# The time has finally come.
	LANG='ja_JP.UTF-8' "${launchParams[@]}" "${launcher}" "${launchUri}"
	"${WINESERVER}" -w

	# Kill the loopback device if it's running
	if [[ $(jobs | wc -l) -gt 0 ]]; then
		kill -15 $(jobs -p)
		if [[ $? -eq 0 ]]; then
			echo "Terminated PipeWire loopback device"
		fi
	fi

	# Little thing added for fun because IIDX EMPRESS's credits song is amazing.
	[[ "$toPlay" == 'iidx' ]] && echo -e "\n\033[1;95mThank you for playing...\033[0m\n"
	exit 0 # exit with a code of 0 in case the above fails (this would return a non-zero value, indicating an "error")
}

install_game() {
	[[ -z "${WGET}" ]] && error "Missing dependency: wget" && exit 1

	installer="$(get_game_information installer)"
	dir_title="$(get_game_information dirtitle)"

	cd "${WINEPREFIX}/drive_c"

	if [[ ! -f "$(basename -- $installer)" ]]; then
		info "Downloading installer for $(get_title)..." >&2
		"${WGET}" -qt 3 -O "${WINEPREFIX}/drive_c/$(basename -- $installer)" "$installer"
		if [[ $? -ne 0 ]]; then
			error "Failed to download installer for $(get_title)!"
			exit 3
		fi
	fi

	if [[ "$silentInstall" -eq 1 ]]; then
		info "Performing silent install..." >&2
		if [[ -z "${MSIEXTRACT}" ]]; then
			case "${LANG}" in
				ja*) NO_MSITOOLS="$(get_title)のサイレントインストールを実行するにはmsitoolsが必要です。" ;;
				*)   NO_MSITOOLS="msitools is required to perform a silent installation of $(get_title)"
			esac
			error "${NO_MSITOOLS}"
			exit 1
		fi

		info "Extracting files from installer..." >&2
		"${MSIEXTRACT}" "$(basename -- $installer)" > /dev/null
		mkdir -p Games/"$(get_game_information dirtitle)"/Resource # make this folder so the game won't complain

		[[ -d System64 ]] && {
			mv -n System64/* windows/system32
			rm -rf System64
			}
		[[ -d Win ]] && {
			mv -n Win/System64/* windows/system32
			rm -rf Win
		}
		# This is actually important, so we need to install this.
		# It "probably" won't replace the DXVK libraries, otherwise I will cry
		if [[ -d Games/"${dir_title}"/'DirectX 9.0c Redist' ]]; then
			info "Installing bundled DirectX 9.0c Runtime..." >&2
			"${WINE}" ./Games/"${dir_title}"/'DirectX 9.0c Redist'/DXSETUP.exe '/silent'
			if [[ $? -ne 0 ]]; then
				case "${LANG}" in
					ja*) DX_FAIL="バンドルされた DirectX ランタイムのインストールに失敗しました。重大な問題が発生する可能性があります。" ;;
					*)   DX_FAIL="Failed to install bundled DirectX runtime! You may encounter severe issues" ;;
				esac
				error "${DX_FAIL}" >&2
				unset DX_FAIL
			else
				# Nuke it, too.
				rm -rf Games/"${dir_title}"/'DirectX 9.0c Redist' 2>/dev/null
			fi
		fi

		info "Creating registry keys for $(get_title)..." >&2
		"${WINE}" reg add "HKLM\\SOFTWARE\\KONAMI\\${dir_title}" /v 'InstallDir' /t 'REG_SZ' /d "C:\Games\\${dir_title}\\" /f '/reg:64' > /dev/null
		"${WINE}" reg add "HKLM\\SOFTWARE\\KONAMI\\${dir_title}" /v 'ResourceDir' /t 'REG_SZ' /d "C:\Games\\${dir_title}\\Resource\\" /f '/reg:64' > /dev/null
	else
		info "Performing interactive install..." >&2
		export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};ieframe=d"
		LANG='ja_JP.UTF-8' "${WINE}" msiexec '/i' "C:\\\\$(basename -- $installer)" '/L*' "C:\\\\${simplename}_install.log"
		case $? in
			0)  ;;
			1)  error "The $(get_title) installer was terminated unexpectedly" && exit 4 ;;
			66) error "The $(get_title) installer was cancelled by the user" && exit 5 ;;
			67) error "$(get_title) failed to install. Check the log at \033[1;4m${WINEPREFIX}/drive/c/${simplename}_install.log\033[22;24m to find out what happened" && exit 6 ;;
			*)  error "An unknown error occurred while installing $(get_title). Check the log at \033[1;4m${WINEPREFIX}/drive/c/${simplename}_install.log\033[22;24m to find out what happened" && exit 7 ;;
		esac
	fi

	sleep 2
	if [[ -z "${launchUri}" ]]; then
		echo -e "\033[1;38;5;10m$(get_title) has been successfully installed.\033[0m"
		[[ "$TERM" == 'dumb' ]] && exec xdg-open "$(get_game_information webpage)"
		exit 0
	else
		unset DXVK_LINK WINEBOOT WINETRICKS
		launcher="$(get_launcher_for_game)"
		launch_game
	fi
}

main() {
	# Warn if running as the root user.
	[[ $EUID -eq 0 ]] && warning "Avoid running this script as root/sudo."

	block_gamescope() {
		# Block gamescope compositors
		# NOTE: To use gamescope, pass --gamescope as an argument
		if [[ $GAMESCOPE_WAYLAND_DISPLAY || $XDG_CURRENT_DESKTOP == 'gamescope' ]]; then
			error "This script should NOT be ran directly through Gamescope"
			echo "To use gamescope, pass the --gamescope flag to this script"
			killall -ABRT gamescope-wl
			exit 134
		fi
	}

	block_gamescope
	parse_flags "$@"

	export WINEPREFIX="${DEFAULT_PREFIX_LOCATION}"
	export WINEDLLOVERRIDES="mshtml=d;winemenubuilder.exe=d"

	if [[ ! -e "${WINEPREFIX}" || ! -f "${WINEPREFIX}/system.reg" ]]; then
		if [[ "$cmd" == 'init' ]]; then
			prepare_wineprefix
			exit
		fi

		error "Wineprefix has not been initialized"
		echo -e "Run \033[1m$(basename -- $0) init\033[0m to initialize the prefix"
		exit 1
	fi

	if [[ -n "$cmd" ]]; then # If $cmd is set, run something here
		case "$cmd" in
			init) prepare_wineprefix ;;
			list) list_games ;;
			*) ;;
		esac

		exit
	else # Run the game.
		launcher="$(get_launcher_for_game)"
		if [[ -z "$launcher" ]]; then
			error "$(get_title) is not installed. Running installer..."
			install_game
		fi

		# If there's no launch URI, open the webpage for the specified game
		if [[ -z "$launchUri" ]]; then
			exec xdg-open "$(get_game_information webpage)"
			[[ "$?" -ne 0 ]] && {
				error "Failed to open webpage for $(get_title)"
				exit 123
			}
		fi

		# Alright, enough lollygagging. We're at the launch phase now.
		launch_game
	fi
}

main "$@"
