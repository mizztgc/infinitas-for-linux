#!/usr/bin/env bash

# Infinitas for Linux script by Mizzt (mizztgc)
# https://github.com/mizztgc/infinitas-for-linux/

# DISCLAIMER:
# This script is in no way affiliated with, endorsed, nor supported by KONAMI. In order to access the full game outside
# of trial mode, you must be subscribed to the beatmania IIDX INFINITAS Basic Course. This script will NOT allow you to
# gain access to things you aren't paying for, nor will the script developer assist you with such actions.
#
# Like most online games today, getting banned for playing the game on GNU/Linux (outside of what the developers
# intended) is a possibility. The script developer is not to be held responsible, should you receive any bans from use of
# this script.
#
# Play at your own risk.

[[ "$UID" -eq 0 ]] && echo -e "$ERROR_LABEL This script is not to be ran as the root user." && exit 127

INFO_LABEL="\033[1m-> INFO:\033[0m"
ERROR_LABEL="\033[1;91m-> ERROR:\033[0m"
WARN_LABEL="\033[1;93m-> WARNING:\033[0m"

# default values and download links
DXVK_LINK="https://github.com/doitsujin/dxvk/releases/download/v2.4/dxvk-2.4.tar.gz"
INFINITAS_LINK="https://d1rc4pwxnc0pe0.cloudfront.net/v2/installer/infinitas_installer_2022060800.msi"
VCR2010_LINK="https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x64.exe"

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
DEFAULT_INSTALL_LOCATION="$HOME/.local/share/infinitas"
DEFAULT_CONFIG_LOCATION="$HOME/.config/infinitas"
TEMP_DIRECTORY="/tmp/infinitas"

echo -e "${WARN_LABEL} This script is still under construction. Some changes MAY break script functionality."

ynPrompt() {
	while true; do
		pro="$1 ["
		case $2 in
			0)
				pro+="Y/n] "
				;;
			1)
				pro+="N/y] "
				;;
			*)
				pro+="y/n] "
				;;
		esac

		read -rp "$(printf "\033[1m$pro\033[0m")" choice
		if [[ -z "$choice" ]]; then
			case "$2" in
				0)
					choice='y'
					;;
				1)
					choice='n'
					;;
			esac
		fi

		case $choice in
			[Yy]|[Yy][Ee][Ss])
				return 0
				;;
			[Nn]|[Nn][Oo])
				return 1
				;;
			*)
				echo -e "$ERROR_LABEL Invalid response."
				;;
		esac
	done
}

is_game_installed() {
	# these slow down the execution of the script on flatpak
	#[[ ! $(${WINE_NOEXPLORER} reg query '/reg:64' 'HKLM\SOFTWARE\KONAMI\beatmania IIDX INFINITAS') ]] && return 1
	#[[ ! $(${WINE_NOEXPLORER} reg query '/reg:64' 'HKLM\SOFTWARE\KONAMI\beatmania IIDX INFINITAS' /v 'InstallDir') ]] && return 2
	#[[ ! $("${WINE_NOEXPLORER}" reg query '/reg:64' 'HKLM\SOFTWARE\KONAMI\beatmania IIDX INFINITAS' /v 'ResourceDir') ]] && return 2
	
	[[ ! -d "${installLocation}/dosdevices/c:/Games/beatmania IIDX INFINITAS" ]] && return 3
	[[ ! -d "${installLocation}/dosdevices/c:/Games/beatmania IIDX INFINITAS/Resource" ]] && return 3
	[[ ! -f "${installLocation}/dosdevices/c:/Games/beatmania IIDX INFINITAS/launcher/modules/bm2dx_launcher.exe" ]] && return 4

	return 0
}

# source config file if it exists
source_config() {
	if [[ ! -f "$DEFAULT_CONFIG_LOCATION/bm2dx.conf" ]]; then
		[[ $useVerbose ]] && echo -e "$ERROR_LABEL Couldn't find $DEFAULT_CONFIG_LOCATION/bm2dx.conf"
		return 1
	fi
	
	[[ $useVerbose ]] && echo -e "$INFO_LABEL Found configuration file at $DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	source "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"

	[[ -n $prefix ]] && declare -g installLocation="${prefix}"
	[[ -n $custom_wine ]] && declare -g customWineDir="${custom_wine}"
	[[ -n $use_flatpak && $use_flatpak == 'true' ]] && declare -g useFlatpak="$use_flatpak"
	return 0
}

dependency_check() {
	declare -a missingDeps
	declare -a missingOptDeps

	# DISCLAIMER: The missing dependency names you see here are from the application's associated package
	# names on Arch Linux. Check your distro's package manager to find the relevant packages.
	# TODO: Add a way to automatically install the packages
	[[ ! $useFlatpak ]] && [[ -z $(which wine 2>/dev/null) ]] && missingDeps+='wine '
	[[ -z $(which xdg-open 2>/dev/null) ]] && missingDeps+='xdg-utils '
	[[ -z $(which tar 2>/dev/null) ]] && missingDeps+='tar '
	[[ -z $(which wget 2>/dev/null) ]] && missingDeps+='wget '
	[[ -z $(which kdialog 2>/dev/null) ]] && missingDeps+='kdialog '
	[[ -z $(which msiextract 2>/dev/null) ]] && missingDeps+='msitools '
	[[ -z $(which notify-send 2>/dev/null) ]] && missingDeps+='libnotify '
	[[ -z $(which pipewire 2>/dev/null) ]] && missingDeps+='pipewire '
	[[ -z $(which pipewire-pulse 2>/dev/null) ]] && missingDeps+='pipewire-pulse '
	[[ -z $(which pactl 2>/dev/null) ]] && missingDeps+='libpulse '
	[[ -z $(which pw-loopback 2>/dev/null) ]] && missingDeps+='pipewire-audio '
	[[ -z $(which magick 2>/dev/null) ]] && missingOptDeps+='imagemagick '
	[[ -z $(which gamemoderun 2>/dev/null) ]] && missingOptDeps+='gamemode '
	[[ -z $(which gamescope 2>/dev/null) ]] && missingOptDeps+='gamescope '

	if [[ ${#missingDeps[@]} -gt 0 || ${#missingOptDeps[@]} -gt 0 ]]; then
		if [[ ${#missingDeps[@]} -gt 0 ]]; then
			echo -e "$ERROR_LABEL The following REQUIRED dependencies were not found on your system:"
			echo -e "\033[91m${missingDeps}\033[0m"
		elif [[ ${#missingDeps[@]} -eq 0 && ${#missingOptDeps[@]} -gt 0 ]]; then
			echo -e "$WARN_LABEL The following OPTIONAL dependencies were not found on your system:"
		fi

		echo "\033[93m${missingOptDeps}\033[0m"

		[[ ${#missingDeps[@]} -gt 0 ]] && exit 4
		echo -e "$INFO_LABEL All required dependencies satisfied."
	else
		echo -e "$INFO_LABEL All dependencies satisfied."
	fi
	
	return 0
}

# disclaimer
read -rd '' disclaimer <<EOM
\n\033[1;91mWARNING:\033[0;1m READ BEFORE CONTINUING:\033[0m\n\n

This script is in no way affiliated with, endorsed, nor supported by KONAMI. In order to access the full game outside\n
of trial mode, you must be subscribed to the beatmania IIDX INFINITAS Basic Course. This script will NOT allow you to\n
gain access to things you aren't paying for, nor will the script developer assist you with such actions.\n\n

Like most online games today, getting banned for playing the game on GNU/Linux (outside of what the developers\n
intended) is a possibility. The script developer is not to be held responsible, should you receive any bans from use of\n
this script.\n\n

\033[3mPlay at your own risk\033[0m.\n\n
EOM

create_game_config() {
	# very experimental here
	echo -e "$INFO_LABEL Creating beatmania IIDX INFINITAS settings file..."
	configDir="$(${WINEPATH} -u "$resdir\\config")"
	[[ ! -e "$configDir" ]] && mkdir -p "$configDir"
cat > "$configDir/1000_cf.xml" <<'EOF'
<?xml version="1.0" encoding="utf-8"?>
<SettingDatas xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Parameters>
    <KeyValuePair>
      <Key>
        <string>DisplaySettings</string>
      </Key>
      <Value>
        <string>0</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>AudioPlaySettings</string>
      </Key>
      <Value>
        <string>1</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>FPSSettings</string>
      </Key>
      <Value>
        <string>0</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_1</string>
      </Key>
      <Value>
        <string>256</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_2</string>
      </Key>
      <Value>
        <string>257</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_3</string>
      </Key>
      <Value>
        <string>258</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_4</string>
      </Key>
      <Value>
        <string>259</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_5</string>
      </Key>
      <Value>
        <string>260</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_6</string>
      </Key>
      <Value>
        <string>261</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_7</string>
      </Key>
      <Value>
        <string>262</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_CW</string>
      </Key>
      <Value>
        <string>263</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_CCW</string>
      </Key>
      <Value>
        <string>264</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_E1</string>
      </Key>
      <Value>
        <string>266</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_E2</string>
      </Key>
      <Value>
        <string>265</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_E3</string>
      </Key>
      <Value>
        <string>267</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig1P_E4</string>
      </Key>
      <Value>
        <string>268</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_1</string>
      </Key>
      <Value>
        <string>256</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_2</string>
      </Key>
      <Value>
        <string>257</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_3</string>
      </Key>
      <Value>
        <string>258</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_4</string>
      </Key>
      <Value>
        <string>259</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_5</string>
      </Key>
      <Value>
        <string>260</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_6</string>
      </Key>
      <Value>
        <string>261</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_7</string>
      </Key>
      <Value>
        <string>262</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_CW</string>
      </Key>
      <Value>
        <string>263</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_CCW</string>
      </Key>
      <Value>
        <string>264</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_E1</string>
      </Key>
      <Value>
        <string>265</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_E2</string>
      </Key>
      <Value>
        <string>266</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_E3</string>
      </Key>
      <Value>
        <string>267</string>
      </Value>
    </KeyValuePair>
    <KeyValuePair>
      <Key>
        <string>KeyConfig2P_E4</string>
      </Key>
      <Value>
        <string>268</string>
      </Value>
    </KeyValuePair>
  </Parameters>
</SettingDatas>
EOF
	cp "$configDir/1000_cf.xml" "$configDir/1001_cf.xml"
	return 0
}

create_icons() {
	[[ -z $(which magick 2>/dev/null) ]] && echo -e "$WARN_LABEL imagemagick was not found on your system. Icons will not be created" && return 1
	[[ $UID -ne 0 ]] &&	declare -I iconFolder="$HOME/.local/share/icons/hicolor"
	[[ $UID -eq 0 ]] &&	declare -I iconFolder="/usr/share/icons/hicolor"
	echo -e "$INFO_LABEL Creating icons..."
	mkdir tmpIconDir
	cd tmpIconDir
	
	if [[ -f "$($WINEPATH -u "$instdir\\beatmania IIDX INFINITAS.ico")" ]]; then
		icon_location="$($WINEPATH -u "$instdir\\beatmania IIDX INFINITAS.ico")"
	else
		icon_location="$(find $TEMP_DIRECTORY/Games -type f -name "*.ico")"
	fi
	magick "$icon_location" icon.png
	if [[ $? -ne 0 ]]; then
		echo -e "$ERROR_LABEL Failed to create icons"
		return 1
	fi
	
	for index in {0..4}; do
		dimens=$(file icon-${index}.png | grep -Eo "[[:digit:]]+ *x *[[:digit:]]+")
		dimens="${dimens% x*}"
		dest="$iconFolder/${dimens}x${dimens}"
		[[ ! -e "$dest" ]] && mkdir -p "$dest"
		[[ ! -e "$dest/apps" ]] && mkdir -p "$dest/apps"
		[[ ! -e "$dest/mimetypes" ]] && mkdir -p "$dest/mimetypes"
		#[[ -f "$dest/apps/infinitas.png" ]] && echo -e "$WARN_LABEL Overwriting $dest/apps/infinitas.png!"
		cp -f icon-${index}.png "$dest/apps/infinitas.png" 2>/dev/null
		#[[ -f "$dest/mimetypes/x-scheme-handler-bm2dxinf.png" ]] && echo -e "$WARN_LABEL Overwriting $dest/mimetypes/x-scheme-handler-bm2dxinf.png!"
		cp -f icon-${index}.png "$dest/mimetypes/x-scheme-handler-bm2dxinf.png" 2>/dev/null
	done
	unset iconLocation dimens dest index
	cd ..
	rm -rf tmpIconDir
		
	[[ $(which gtk-update-icon-cache 2>/dev/null) ]] && gtk-update-icon-cache
	echo -e "$INFO_LABEL Created icons"
	return 0
}

create_launcher() {
	[[ $UID -ne 0 ]] &&	declare -I appsFolder="$HOME/.local/share/applications"
	[[ $UID -ne 0 ]] &&	declare -I mimeFolder="$HOME/.local/share/mime"
	[[ $UID -eq 0 ]] &&	declare -I appsFolder="/usr/share/applications"
	[[ $UID -eq 0 ]] &&	declare -I mimeFolder="/usr/share/mime"
	echo -e "$INFO_LABEL Creating launcher and mimetype..."
cat > $appsFolder/infinitas-launcher.desktop <<'EOF'
[Desktop Entry]
MimeType=x-scheme-handler/bm2dxinf
Icon=infinitas
Name=beatmania IIDX INFINITAS Launcher
NoDisplay=true
Type=Application
EOF

cat > $appsFolder/infinitas.desktop <<'EOF'
[Desktop Entry]
Categories=Application;Game;
Icon=infinitas
GenericName=Rhythm Game
Name=beatmania IIDX INFINITAS
Type=Application
Exec=xdg-open https://p.eagate.573.jp/game/infinitas/2/api/login/login.html
EOF

	[[ $UID -eq 0 ]] && echo "Exec=$(basename -- $0) %u" >> $appsFolder/infinitas-launcher.desktop
	[[ $UID -ne 0 ]] && echo "Exec=$SCRIPT_DIR/$(basename -- $0) %u" >> $appsFolder/infinitas-launcher.desktop

	[[ ! -e $mimeFolder/packages ]] && mkdir "$mimeFolder/packages" 2>/dev/null
cat > "$mimeFolder/packages/x-scheme-handler-bm2dxinf.xml" <<'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
    <mime-type type="x-scheme-handler/bm2dxinf">
        <comment>beatmania IIDX INFINITAS</comment>
        <icon name="x-scheme-handler-bm2dxinf"/>
        <glob-deleteall/>
        <glob pattern="bm2dxinf://*"/>
    </mime-type>
</mime-info>
EOF

	update-desktop-database $appsFolder
	update-mime-database $mimeFolder
	return 0
}

create_config() {
	echo -e "$INFO_LABEL Creating configuration file..."
	mkdir -p "$DEFAULT_CONFIG_LOCATION" 2>/dev/null
cat > "$DEFAULT_CONFIG_LOCATION/bm2dx.conf" <<EOF
# Infinitas for Linux configuration file
# See https://github.com/mizztgc/infinitas-for-linux/wiki/Configuration-File for explanations of
# each configuration option

EOF
	echo "prefix=\"${installLocation}\"" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	if [[ $customWineDir ]]; then
		echo "custom_wine=\"${customWineDir}\"" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	else
		echo "custom_wine=" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	fi
	
	if [[ $useFlatpak ]]; then
		echo "use_flatpak=true" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	else
		echo "#use_flatpak=false" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	fi

	echo "use_winevd=true" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	echo "use_gamemode=false" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	echo -e "#g amescope doesn't play nicely with wine, so it's disabled.\n#use_gamescope=false" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"
	echo "#pa_latency=40" >> "$DEFAULT_CONFIG_LOCATION/bm2dx.conf"

	echo -e "$INFO_LABEL Wrote configuration file to $DEFAULT_CONFIG_LOCATION/bm2dx.conf"
}

create_keys() {
	echo -e "$INFO_LABEL Creating registry keys..."
	${WINE_NOEXPLORER} reg add 'HKLM\SOFTWARE\KONAMI\beatmania IIDX INFINITAS' /v 'InstallDir' /t 'REG_SZ' /d 'C:\Games\\beatmania IIDX INFINITAS\\' /f '/reg:64' 2>/dev/null
	${WINE_NOEXPLORER} reg add 'HKLM\SOFTWARE\KONAMI\beatmania IIDX INFINITAS' /v 'ResourceDir' /t 'REG_SZ' /d 'C:\Games\\beatmania IIDX INFINITAS\Resource\\' /f '/reg:64' 2>/dev/null
	${WINE_NOEXPLORER} reg add 'HKLM\SOFTWARE\Microsoft\DirectDraw' /v 'ForceRefreshRate' /t 'REG_DWORD' /d 120 /f '/reg:64' 2>/dev/null
	${WINE_NOEXPLORER} reg add 'HKCU\SOFTWARE\Wine\Explorer\Desktops' /v 'Infinitas' /t 'REG_SZ' /d "1920x1080" /f '/reg:64' 2>/dev/null
	return 0
}

set_vars() {
	# set the default prefix location if not specified
	if [[ ! $installLocation ]]; then
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Setting install location to ${DEFAULT_INSTALL_LOCATION}"
		declare -g installLocation="${DEFAULT_INSTALL_LOCATION}"
	fi
	
	# check if the install location exists or not
	if [[ -e "${installLocation}" ]]; then
		if [[ $InstallCmd -eq 1 ]]; then
			[[ -f "${installLocation}/system.reg" || -f "${installLocation}/user.reg" ]] && echo -e "$WARN_LABEL Installing beatmania IIDX INFINITAS to an existing Wineprefix is not recommended!"
		fi

		if [[ -n "$(find -L ${installLocation}/dosdevices/c:/Games -type f -name 'bm2dx_launcher.exe' 2>/dev/null)" ]]; then
			if [[ $InstallCmd -eq 1 ]]; then
				echo -e "$ERROR_LABEL The installer has detected existing files for the beatmania IIDX INFINITAS launcher. Installation cannot continue."
				exit 4
			fi

			[[ $useVerbose ]] && echo -e "$INFO_LABEL Found beatmania IIDX INFINITAS in specified prefix"
		else
			if [[ $InstallCmd -ne 1 ]]; then
				echo -e "$ERROR_LABEL beatmania IIDX INFINITAS is not installed to this prefix"
				exit 4
			fi
		fi
	else
		if [[ $InstallCmd -eq 1 ]]; then
			mkdir -p $installLocation 2>/dev/null
			[[ $? -eq 0 ]] && echo -e "$INFO_LABEL Created new wineprefix directory at ${installLocation}"
		else
			echo -e "$ERROR_LABEL couldn't find prefix at ${installLocation}"
			exit 4
		fi
	fi
	
	if [[ $useFlatpak ]]; then
		# flatpak warning
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Attempting to use Flatpak build of Wine..."
		case "$TERM" in
			dumb)
				[[ $(which notify-send 2>/dev/null) ]] && notify-send "Flatpak Warning" -i 'dialog-warning' -a "$(basename -- $0)" "It is NOT RECOMMENDED to use the Flatpak build of Wine with this script! If possible, please use a native Wine build from your distribution or a custom-built one."
				echo "It is NOT RECOMMENDED to use the Flatpak build of Wine with this script! If possible, please use a native Wine build from your distribution or a custom-built one."
				;;
			*)
				echo -e "$WARN_LABEL It is NOT RECOMMENDED to use the Flatpak build of Wine with this script! If possible, please use a native Wine build from your distribution or a custom-built one."
				;;
		esac
		[[ -z $(which flatpak 2>/dev/null) ]] && echo -e "$ERROR_LABEL Flatpak was not found on your system." && exit 2
		declare -ag EXTRA_FLATPAK_ARGUMENTS
		
		if [[ -n $(flatpak list --user --app --columns=application | grep -w 'org.winehq.Wine') ]]; then
			[[ $useVerbose ]] && echo -e "$INFO_LABEL Found Wine (Flatpak) in user profile"
			EXTRA_FLATPAK_ARGUMENTS+="--user"
		elif [[ -n $(flatpak list --system --app --columns=application | grep -w 'org.winehq.Wine') ]]; then
			[[ $useVerbose ]] && echo -e "$INFO_LABEL Found Wine (Flatpak) in system profile"
			EXTRA_FLATPAK_ARGUMENTS+="--system"
		else
			echo -e "$ERROR_LABEL Wine (Flatpak) has not been installed to your system. Assuming you have the flathub repository added, you can install Wine by running the following comamnd:\n  \033[1mflatpak install org.winehq.Wine\033[0m"
			exit 2
		fi

		[[ ! $useVerbose ]] && case "$TERM" in
			dumb)
				echo "Found Wine (Flatpak)"
				;;
			*)
				echo -e "$INFO_LABEL Found Wine (Flatpak)"
				;;
		esac
		EXTRA_FLATPAK_ARGUMENTS+=" --env=WINEPREFIX=${installLocation} --env=WINEDEBUG='fixme-all' --env=WINEDLLOVERRIDES='mscoree' --filesystem=${installLocation}:create --filesystem=$TEMP_DIRECTORY"
		[[ $InstallCmd -eq 0 ]] && EXTRA_FLATPAK_ARGUMENTS+=" --env=DXVK_FRAME_RATE=120"
		WINE="flatpak run ${EXTRA_FLATPAK_ARGUMENTS} --command=wine64 org.winehq.Wine"
		WINE_NOEXPLORER="flatpak run ${EXTRA_FLATPAK_ARGUMENTS} --env=WINEDLLOVERRIDES='explorer.exe=d' --command=wine64 org.winehq.Wine" # necessary for not creating an explorer process
		[[ $InstallCmd -ne 0 ]] && WINEBOOT="flatpak run ${EXTRA_FLATPAK_ARGUMENTS} --command=wineboot org.winehq.Wine"
		WINEPATH="flatpak run ${EXTRA_FLATPAK_ARGUMENTS} --env=WINEDLLOVERRIDES='explorer.exe=d;services.exe=d' --command=winepath org.winehq.Wine"
		WINESERVER="flatpak run ${EXTRA_FLATPAK_ARGUMENTS} --command=wineserver org.winehq.Wine"
	elif [[ $customWineDir ]]; then	# use custom wine build if specified
		[[ -n $customWineDir ]] && [[ $customWineDir == '/usr' || $customWineDir == '/' ]] && echo -e "$ERROR_LABEL Are you serious?" && exit 100
	
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Attempting to use custom Wine build at $customWineDir..."
		[[ ! -e "${customWineDir}" ]] && echo -e "$ERROR_LABEL Custom Wine build directory does not exist" && exit 2
		[[ ! -d "${customWineDir}" ]] && echo -e "$ERROR_LABEL Custom Wine build location is not a directory" && exit 2
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Found directory at $customWineDir"
		
		[[ ! -f "${customWineDir}/bin/wine" ]] && echo -e "$ERROR_LABEL Unable to find \033[1mwine\033[0m executable in ${customWineDir}/bin" && exit 2
		[[ ! -f "${customWineDir}/bin/wineboot" && $InstallCmd -ne 0 ]] && echo -e "$ERROR_LABEL Unable to find \033[1mwineboot\033[0m executable in ${customWineDir}/bin" && exit 2
		[[ ! -f "${customWineDir}/bin/winepath" && $InstallCmd -ne 0 ]] && echo -e "$ERROR_LABEL Unable to find \033[1mwinepath\033[0m executable in ${customWineDir}/bin" && exit 2
		[[ ! -f "${customWineDir}/bin/wineserver" ]] && echo -e "$ERROR_LABEL Unable to find \033[1mwineserver\033[0m executable in ${customWineDir}/bin" && exit 2
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Found all necessary Wine exectuables in ${customWineDir}"
		[[ ! $useVerbose ]] && echo -e "$INFO_LABEL Found custom Wine build ($(basename -- ${customWineDir}))"

		if [[ -f ${customWineDir}/bin/wine64 ]]; then
			WINE="${customWineDir}/bin/wine64"
		else
			WINE="${customWineDir}/bin/wine"
		fi
		
		WINE_NOEXPLORER="env WINEDLLOVERRIDES='explorer.exe=d' ${WINE}"
		[[ $InstallCmd -ne 0 ]] && WINEBOOT="${customWineDir}/bin/wineboot"
		WINEPATH="env WINEDLLOVERRIDES='explorer.exe=d;services.exe=d' ${customWineDir}/bin/winepath"
		WINESERVER="${customWineDir}/bin/wineserver"
	else # use system wine
		echo -e "$WARN_LABEL Attempting to use system Wine..."
		[[ -z $(which wine 2>/dev/null) ]] && echo -e "$ERROR_LABEL Wine is not installed on your system" && exit 2
		[[ -z $(which wineboot 2>/dev/null) && $InstallCmd -ne 0 ]] && echo -e "$ERROR_LABEL Wine is not installed on your system (missing: wineboot)" && exit 2
		[[ -z $(which winepath 2>/dev/null) && $InstallCmd -ne 0 ]] && echo -e "$ERROR_LABEL Wine is not installed on your system (missing: winespath)" && exit 2
		[[ -z $(which wineserver 2>/dev/null) ]] && echo -e "$ERROR_LABEL Wine is not installed on your system (missing: wineserver)" && exit 2
		[[ $useVerbose ]] && echo -e "$INFO_LABEL Found all necessary Wine exectuables"
		[[ ! $useVerbose ]] && echo -e "$INFO_LABEL Found Wine"

		# some distros do not have a wine64 executable, so use the normal wine executable if possible
		if [[ -n $(which wine64 2>/dev/null) ]]; then
			WINE="$(which wine64)"
		else
			WINE="$(which wine)"
		fi
		WINE_NOEXPLORER="env WINEDLLOVERRIDES='explorer.exe=d' ${WINE}"
		[[ $InstallCmd -ne 0 ]] && WINEBOOT="$(which wineboot)"
		WINEPATH="env WINEDLLOVERRIDES='explorer.exe=d;services.exe=d' $(which winepath)"
		WINESERVER="$(which wineserver)"
	fi

	# display info about everything if verbose is enabled
	[[ $useVerbose && ! $useFlatpak ]] && echo -e "$INFO_LABEL All installer variables have been set!\nwine: ${WINE}\nwineboot: ${WINEBOOT}\nwinepath: ${WINEPATH}\nwineserver: ${WINESERVER}\n"
	[[ $useVerbose ]] && echo "install location: ${installLocation}"

	# set exports if not using flatpak
	[[ ! $useFlatpak ]] && export WINEPREFIX="${installLocation}"
	[[ ! $useFlatpak ]] && export WINEDEBUG='fixme-all'
	[[ ! $useFlatpak && $InstallCmd -eq 0 ]] && export DXVK_FRAME_RATE=120
	[[ ! $useFlatpak ]] && export WINEDLLOVERRIDES='mscoree'
	#[[ ! $useFlatpak ]] && export DXVK_HUD='fps'

	# proton-specific exports
	# dunno why you would want to use it, but whatever
	#[[ ! $useFlatpak ]] && export PROTON_NO_D3D11=1
	#[[ ! $useFlatpak ]] && export PROTON_NO_D3D10=1
	#[[ ! $useFlatpak ]] && export PROTON_NO_ESYNC=1
	#[[ ! $useFlatpak ]] && export PROTON_NO_FSYNC=1
	

	# set variables as read only
	declare -gr instdir='C:\Games\beatmania IIDX INFINITAS'
	declare -gr resdir='C:\Games\beatmania IIDX INFINITAS\Resource'
	declare -r useFlatpak 2>/dev/null
	declare -r customWineDir 2>/dev/null
	declare -r installLocation 2>/dev/null

	# some wine versions use weird names, so this script may block some valid wine versions.
	# sorry.
	[[ $("${WINE}" --version | cut -d'.' -f1 | cut -c6- ) -lt 9 ]] && echo -e "$ERROR_LABEL This script requires Wine 9.0 or later." && exit 9
	return 0
}

# parse flags
parse_flags() {
	[[ $# -eq 0 ]] && echo -e "$ERROR_LABEL No command provided. Type \033[0m$0 help\033[0m for a list of usable commands" && exit 1

	while [[ $# -gt 0 ]]; do
		cArg="$1"
		if [[ "${cArg:0:2}" == '--' ]]; then
			case "${cArg:2}" in
				verbose)
					declare -gr useVerbose=true 2>/dev/null
					;;
				flatpak)
					echo -e "$ERROR_LABEL Flatpak is disabled because it doesn't want to be normal."
					exit 99
					[[ $customWineDir ]] && echo -e "$ERROR_LABEL \033[1m--flatpak\033[0m and \033[1m--winebuild\033[0m cannot be used at the same time" && exit 1
					declare -gr useFlatpak=true 2>/dev/null
					;;
				prefix|prefix=*)
					[[ -z "${1##*=}" || "${cArg:2}" == 'prefix' ]] && echo -e "$ERROR_LABEL No prefix location specified" && exit 1
					[[ -n $installLocation ]] && unset installLocation
					declare -g installLocation="${1##*=}"
					;;
				winebuild|winebuild=*)
					[[ $useFlatpak ]] && echo -e "$ERROR_LABEL \033[1m--flatpak\033[0m and \033[1m--winebuild\033[0m cannot be used at the same time" && exit 1
					[[ -z "${1##*=}" || "${cArg:2}" == 'winebuild' ]] && echo -e "$ERROR_LABEL No Wine build directory specified" && exit 1
					[[ -n $customWineDir ]] && unset customWineDir
					declare -g customWineDir="${1##*=}"
					;;
				*)
					echo -e "$ERROR_LABEL Unknown argument \033[0m$cArg\033[0m"
					exit 1
					;;
			esac
		# show help
		else
			case "$cArg" in
				help)
cat <<'EOM'

Infinitas for Linux install script by Mizzt (mizztgc)
https://github.com/mizztgc/infinitas-for-linux

General commands/arguments:
  help: Shows this message
  launch: Launch the game
  
Install commands:
  install: Install beatmania IIDX INFINITAS
  uninstall: Uninstall beatmania IIDX INFINITAS

Install arguments:
  --flatpak: Use the Flatpak build of Wine over your system's native build (NOT RECOMMENDED)
  --prefix: Set the location of the prefix (default: ~/.local/share/infinitas)
    ex: --prefix=/path/to/prefix
  --winebuild: Use a custom build of Wine for installation (cannot be used with --flatpak)
    ex: --winebuild=/path/to/winebuild_dir
  --verbose: Output more information during installation

Post-install commands:
  create-icons: Generates the icons for beatmania IIDX INFINITAS (requires imagemagick)
  create-launcher: Generates a new .desktop launcher for opening the game
  create-script: Generates a new launch script for opening beatmania IIDX INFINITAS
  fix-registry: Fixes the registry keys in the prefix to help the game run

EOM
						exit 0
					;;
				bm2dxinf://*)
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=0
					[[ "${cArg:0:11}" == 'bm2dxinf://' ]] && declare -gr LAUNCH_TOKEN="$1"
					;;	
				'install')
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=1
					;;
				'uninstall')
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=2
					;;
				'create-icons')
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=3
					;;
				'create-launcher')
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=4
					;;
				'fix-registry')
					[[ $InstallCmd ]] && echo -e "$ERROR_LABEL You can only specify one command" && exit 9
					declare -gr InstallCmd=5
					;;
				*)
					echo -e "$ERROR_LABEL Unknown command \033[1m$cArg\033[0m"
					exit 1		
			esac
		fi

		shift
	done
	unset cArg
}

# TODO: redo this entire part
#	- only parse flags when running install function
#	- only source and parse config file when a login token is passed to this script 

source_config		# source the config file for post-install commands
parse_flags $@		# parse all arguments and commands
set_vars			# set script variables and lock them
case $InstallCmd in
	0)	# launch game
		[[ "$TERM" != 'dumb' ]] && echo -e "$ERROR_LABEL Don't try to pass login tokens directly to this script." && exit 1
	
		[[ -z $(which kdialog 2>/dev/null) ]] && echo -e "$ERROR_LABEL Cannot find kdialog" && exit 2
		[[ -z $(which notify-send 2>/dev/null) ]] && echo -e "$ERROR_LABEL Cannot find notify-send" && exit 2
		[[ -z $(which pw-loopback 2>/dev/null) ]] && echo -e "$ERROR_LABEL Cannot find pw-loopback" && exit 2
		show_error_box() {
			kdialog --title "Failed to launch game" --error "$1" 2>/dev/null
			exit $2
		}

		# block gamescope
		if [[ $GAMESCOPE_WAYLAND_DISPLAY || $XDG_CURRENT_DESKTOP == 'gamescope' ]]; then
			[[ $TERM != 'dumb' ]] && echo -e "\n\n\t\033[1;91m!!! DO NOT RUN THIS SCRIPT DIRECTLY THROUGH GAMESCOPE !!!\033[0m\n\n"
			[[ $TERM == 'dumb' ]] && show_error_box "You should NOT be running this script directly through a gamescope session.\nPlease enable gamescope support within your configuration file located at $DEFAULT_CONFIG_LOCATION/bm2dx.conf" 134
			killall -ABRT gamescope-wl
			exit 134
		fi

		# check time
		if [[ $(date -u +%l) -ge 20 && $(date -u +%l) -lt 22 ]]; then
			approx_time=$(printf '%(%l:%M%P %Z)T\n' "$(date +%s -u -d "22:00")")
			if [[ "${approx_time:0:1}" == ' ' ]]; then
				approx_time="${approx_time:1}"
			fi
			show_error_box "The e-amusement Cloud servers are currently down for maintenance.\nPlease wait until $approx_time and try again." 10
		fi

		# make sure the game is installed
		case $(is_game_installed; echo $?) in
			0)
				echo "Found beatmania IIDX INFINITAS Launcher"
				;;
			1|2|3)
				show_error_box "beatmania IIDX INFINITAS is not installed.\nRun '$(basename -- $0) install' in a terminal to install the game." 1
				;;
			4)
				show_error_box "Couldn't find beatmania IIDX INFINITAS launcher executable."
				;;
		esac

		# open the website if no launch token is given
		[[ ! "$LAUNCH_TOKEN" ]] && show_error_box "No login string provided" 1
		[[ "${#LAUNCH_TOKEN}" -ne 89 && "${#LAUNCH_TOKEN}" -ne 91 ]] && show_error_box "Login string provided is an invalid length" 3
		[[ "${LAUNCH_TOKEN:85}" != 'rel=' && "${LAUNCH_TOKEN:85}" != 'trial=' ]] && show_error_box "Login string contains an unknown mode: ${LAUNCH_TOKEN:85:-1}" 4

		# get launch parameters going
		declare -a prelaunchParam
		declare -a wineParam


		if [[ -n $use_gamemode && $use_gamemode == 'true' ]]; then
			if [[ -n $(which gamemoderun 2>/dev/null) ]]; then
				prelaunchParam+="$(which gamemoderun)"
			fi
		fi

		if [[ -n $use_gamescope && $use_gamescope == 'true' ]]; then
			if [[ -n $(which gamescope 2>/dev/null) ]]; then
				notify-send "Gamescope Warning" -a "beatmania IIDX INFINITAS" -i "dialog-warning" -t 5000 "Gamescope support is currently experimental and has a lot of issues with Wine. You may also need to manually kill this process when you are done playing."
				prelaunchParam+=" $(which gamescope) -W 1920 -H 1080 -w 1920 -h 1080 -r 120 --framerate-limit 120 -f --"
				sleep 2	# give the user more time to read the warning
			else
				notify-send "Gamescope not found!" -a "beatmania IIDX INFINITAS" -i "dialog-warning" "Gamescope support has been enabled in your configuration file, but gamescope was not found on your system."
			fi
		fi

		if [[ $useFlatpak ]]; then
			show_error_box "Flatpak is disabled because it doesn't want to be normal.\nPlease play this game through a native build of Wine." 99
		fi

		# if you frequently see a 5-1501-0003 error, you can thank xwayland for that. this is because xwayland only
		# allows applications to run at your currently set refresh rate, which means at either 60 or 120hz, the game will
		# start up. anything other than that, and you're getting that error code.
		# the only real fix for this would be to just play in an Xorg session, but if you insist on using wayland, you should either:
		#	1. set use_winevd in your config file to 'true'
		#	2. manually set your refresh rate to 60Hz (or 120Hz if supported)
		if [[ $XDG_SESSION_TYPE == 'wayland' ]]; then
			notify-send "Wayland Warning" -a "beatmania IIDX INFINITAS" -i "dialog-warning" -t 10000 "It is not recommended to play beatmania IIDX INFINITAS in a Wayland session. Please either play in an Xorg session or set 'use_winevd' in your configuration file to 'true'."
			sleep 2
		fi

		# "well why not just force the refresh rate to 120Hz through the registry?"
		# that has no effect outside of a virtual desktop. it's all xwayland's fault.

		wineParams+='start /high'
		if [[ -n $use_winevd && $use_winevd == 'true' ]]; then
			wineParams+=' explorer /desktop=Infinitas,1920x1080'
		fi
		launchParam+=" $LAUNCH_TOKEN"

		"${WINESERVER}" -p10 # start wineserver and make it persistent for a bit
		# start loopback device
		pw-loopback -m '[ FL FR ]' --capture-props='media.class=Audio/Sink node.name=infinitas node.description=infinitas audio.rate=44100' &
		export PULSE_SINK='infinitas' # to ensure the wine process defaults to using this loopback instead of your system's defaults.
		[[ -n $pa_latency ]] && export PULSE_LATENCY_MSEC=$pa_latency	# export pulseaudio latency variable if found in config
		"${prelaunchParam}" "${WINE}" ${wineParams} 'C:\Games\beatmania IIDX INFINITAS\launcher\modules\bm2dx_launcher.exe' "$LAUNCH_TOKEN"	# and now we launch the game
		"${WINESERVER}" -w 	# wait for wineserver to terminate
		sleep 1
		kill -15 $(jobs -p) 2>/dev/null	# kill all processes
		exit 0
		;;
	1)	# install
		dependency_check
		sleep 2
		
		# show disclaimer
		echo -e $disclaimer
		ynPrompt "Do you agree to these terms?"
		if [[ "$?" -ne 0 ]]; then
			echo -e "$ERROR_LABEL You have not accepted the agreement. Exiting installer..."
			exit 1
		fi

		mkdir $TEMP_DIRECTORY
		cd $TEMP_DIRECTORY

		"${WINESERVER}" -p

		if [[ ! -f "$installLocation/system.reg" ]]; then
			"${WINEBOOT}" -i 2>/dev/null
		fi

		# download game files
		echo -e "$INFO_LABEL Downloading installer for beatmania IIDX INFINITAS..."
		if [[ -f "$TEMP_DIRECTORY/$(basename -- $INFINITAS_LINK)" ]]; then
			echo -e "$INFO_LABEL" "Skipped: Found beatmania IIDX INFINITAS installer..."
		else
			wget -q "$INFINITAS_LINK"
			if [[ $? -ne 0 ]]; then
				echo -e "$ERROR_LABEL Failed to download beatmania IIDX INFINITAS launcher!"
				exit 2
			fi
		fi

		# extract gamefiles
		echo -e "$INFO_LABEL Extracting files from installer..."
		msiextract "$TEMP_DIRECTORY/$(basename -- $INFINITAS_LINK)" > /dev/null
		mkdir "$TEMP_DIRECTORY/Games/beatmania IIDX INFINITAS/Resource" 2>/dev/null
		
		# delete unnecessary folders
		rm -rf "$TEMP_DIRECTORY/Win" 2>/dev/null
		echo -e "$INFO_LABEL Installing DirectX 9.0c Redist..."
		"${WINE}" "$TEMP_DIRECTORY/Games/beatmania IIDX INFINITAS/DirectX 9.0c Redist/DXSETUP.exe" '/silent'
		if [[ $? -ne 0 ]]; then
			echo -e "$ERROR_LABEL Failed to install DirectX 9.0c Redist!"
		fi
		rm -rf "$TEMP_DIRECTORY/Games/beatmania IIDX INFINITAS/DirectX 9.0c Redist" 2>/dev/null
		
		# download vcr2010
		echo -e "$INFO_LABEL Downloading Microsoft Visual C++ Redist 2010..."
		if [[ -f "$TEMP_DIRECTORY/vcredist_x64.exe" ]]; then
			echo -e "$INFO_LABEL Skipped: Found vcr2010 installer..."
		else
			wget -q "$VCR2010_LINK"
			if [[ "$?" -ne 0 ]]; then
				echo -e "$ERROR_LABEL Failed to download Visual C++ Redist 2010!"
				exit 2
			fi
		fi
		
		# install vcr2010
		echo -e "$INFO_LABEL Installing Microsoft Visual C++ Redist 2010..."
		${WINE} 'vcredist_x64.exe' '/quiet'
		if [[ $? -ne 0 ]]; then
			echo -e "$ERROR_LABEL Failed to install Visual C++ Redist 2010!"
		fi
		
		# install dxvk
		echo -e "$INFO_LABEL Downloading DXVK..."
		if [[ -f "$TEMP_DIRECTORY/$(basename -- $DXVK_LINK)" ]]; then
			echo -e "$INFO_LABEL" "Skipped: Found DXVK archive..."
		else
			wget -q "$DXVK_LINK" 2>/dev/null
			if [[ $? -ne 0 ]]; then
				echo -e "$ERROR_LABEL Failed to download DXVK archive!"
				exit 2
			fi
		fi
		
		# extract dxvk archive
		echo -e "$INFO_LABEL Extracting DXVK archive..."
		tar -zxf $(basename -- $DXVK_LINK) 2>/dev/null
		echo -e "$INFO_LABEL Moving .dll files from archive..."
		cp -Lf $TEMP_DIRECTORY/dxvk*/x64/d3d9.dll "${installLocation}/dosdevices/c:/windows/system32/"
		cp -Lf $TEMP_DIRECTORY/dxvk*/x32/d3d9.dll "${installLocation}/dosdevices/c:/windows/syswow64/"
		${WINE_NOEXPLORER} reg add 'HKCU\Software\Wine\DllOverrides' /v 'd3d9' /d 'native,builtin' /f '/reg:64'

		create_icons
		create_launcher
		create_config
		create_game_config
		create_keys
		
		cp -Lr "$TEMP_DIRECTORY/Games" "$(${WINEPATH} -u 'C:\\')"
		rm -rf "$TEMP_DIRECTORY"
		$WINESERVER -k
		
		echo -e "\033[1;92mbeatmania IIDX INFINITAS has been successfully installed!\033[0m"
		exit
		;;

	2)	# uninstall
		# TODO: implement this
		echo -e "$ERROR_LABEL not yet implemented."
		exit 1
		;;
	3) # create icons
		create_icons
		;;
	4) # create launcher
		create_launcher
		;;
	5) # fix registry keys
		create_keys
		"${WINESERVER}" -k
		exit 0
		;;
esac
exit $?
